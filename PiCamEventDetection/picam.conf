# Author: Miguel Millan
# class: CSI4999 - Senior Capstone
# title: AIY Raspberry Pi configuration documentation
# version: 0.0

# First follow instructions to set up the AIY vision kit (using this https://aiyprojects.withgoogle.com/vision)

# On first boot, follow the GUI instructions to change the default password and set up your time zone.
New Password = Rp!capst0ne
region = United States
timezone = detroit

# It is okay to update the system, but DO NOT UPGRADE!!! this will break the AIY packages. I had to reinstall the whole image to fix this.
sudo apt-get update

# Next we want to configure a static IP and ensure ssh is enable for headless operation.

sudo vim /etc/dhcpcd.conf

# Inside the dhcpcd.conf define the network interface, static IP, router, and dns
interface wlan0
static ip_address=192.168.1.200/24
static routers=192.168.1.1
static domain_name_servers=192.168.1.1

# By default, the AIY rasbian image should have shh already enabled, but you can check by using
sudo systemctl status ssh.service

# enable ssh if it is not already:
sudo systemctl start ssh.service
sudo systemctl enable ssh.service

# Disable sleep
sudo vim /etc/lightdm/lightdm.conf
#   Inside the config look for xserver-command=X
#   replace it with xserver-command=X -s 0 dpms

# Disable to joy detector demo so it doesn't show on startup.
sudo systemctl disable joy_detection_demo.service

# reboot the pi, you should be able to ssh into it now using pi@192.168.1.200
sudo reboot

# create python virtual environment:
# Note: we uses --system-site-packages to get all the python packages already on the system. We need the numpy module that comes with the AIY kit since using pip3 install numpy gives us a broken version.
sudo apt-get install python3-venv
python3 -m venv local-venv --system-site-packages

# To use venv:
# source local-venv/bin/activate
#
# To exit venv:
# deactivate

# From here on, any pip3 installs need to be done in the venv. 
# Also, make sure to exit/deactivate the venv before executing sudo commands.

# enter venv
source local-venv/bin/activate

# Install imutils for basic image processing functions
pip3 install imutils

# exit venv
deactivate

# Install the dev version of OpenCV from the repo:
# Alternatively, you can follow the steps at the bottom which detail 
# compiling OpenCV from source.
sudo apt-get install libopencv-dev

# graphics dependencies to run dev OpenCV for pi home-surveillence example
sudo apt-get install libqtgui4

sudo apt-get install libqt4-test

sudo apt-get install libcblas3

sudo apt-get install libatlas3-base

sudo apt-get install libjasper1

# enter venv
source local-venv/bin/activate

# pip install opencv
pip3 install opencv-python

# get picamera
pip3 install picamera


# No longer used Steps:
## Install OpenCV following the guide here: https://www.pyimagesearch.com/2015/12/14/installing-opencv-on-your-raspberry-pi-zero/
#
# Specifics:
#
# NOTE!!!!! 
# After a whole night wasted, this pi zero can't compile OpenCV from source,
# As such, download the dev version from the apt repo.
#
# I will leave these instructions in the event we set up a rPi 3B with the 
# vision bonnet. A pi3 should have enough compute power.
# 
# ============ DEPENDENCIES ===============
# Install developer tools
sudo apt-get install build-essential cmake pkg-config

# Image I/O packages
sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev

# video I/O packages
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install libxvidcore-dev libx264-dev

# GTK development library for OpenCV's GUI interface
sudo apt-get install libgtk2.0-dev

# routine optimization packages leveraged by OpenCV
sudo apt-get install libatlas-base-dev gfortran

# python should already be installed, but here's the command if not
sudo apt-get install python-2.7-dev python3-dev

# ============ Get the source code ===============
cd ~
wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.4.5.zip
unzip opencv.zip

wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.4.5.zip
unzip opencv_contrib.zip

# remove zip files
rm opencv.zip opencv_contrib.zip

# =========== Setting up python virtual env ===========
# you should have pip, if not install it

# install virtualenv and virtualenvwrapper
sudo pip install virtualenv virtualenvwrapper

# open your profile:
vim ~/.profile

# append the following (uncommented):
# # virtualenv and virtualenvwrapper
# export WORKON_HOME=$HOME/.virtualenvs
# source /usr/local/bin/virtualenvwrapper.sh

# source ~/.profile to reload the changes
source ~/.profile

# create a new python environment named cv
mkvirtualenv cv -p python3

# install numpy with pip3 (for python 3)
pip3 install numpy

# ================ Compile and Install OpenCV ===========
# make sure you are in the cv environment
workon cv 

# setup and build using CMake
cd ~/opencv-3.4.5/
mkdir build
cd build
cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_C_EXAMPLES=ON \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.4.5/modules \
    -D BUILD_EXAMPLES=ON ..

# make - this is gonna take all night to compile...
make

